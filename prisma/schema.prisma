generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum TokenType {
  PASSWORD_RECOVER
  EMAIL_VALIDATION
}

model User {
  id                  String         @id @default(uuid())
  name                String
  email               String         @unique
  passwordHash        String         @map("password_hash")
  defaultOrganization String? // slug of the user's default organization
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  invites             Invite[]
  member_on           Member[]
  owns_organizations  Organization[]
  Contract            Contract[]

  @@index(defaultOrganization)
  @@map("users")
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  fantasyName  String?    @map("fantasy_name")
  socialName   String?    @map("social_name")
  cnpj         String?
  phone        String?
  email        String?
  zipcode      String?
  address      String?
  city         String?
  state        String?
  neighborhood String?
  slug         String     @unique
  plan         String     @default("free")
  logo         String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String     @map("owner_id")
  invites      Invite[]
  members      Member[]
  stockItems   Item[]
  category     Category[]
  customers    Customer[]
  contracts    Contract[]

  @@map("organizations")
}

model Member {
  id             String       @id @default(uuid())
  role           Role         @default(MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Invite {
  id             String       @id @default(uuid())
  email          String
  role           Role
  createdAt      DateTime     @default(now()) @map("created_at")
  author         User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId       String?      @map("author_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  code      String?
  createdAt DateTime  @default(now()) @map("created_at")
  email     String?

  @@map("tokens")
}

model Item {
  id             String         @id @default(cuid())
  name           String
  code           String?        @unique
  objectPrice    Float          @map("object_price")
  rentPrice      Float          @map("rent_price")
  size           String?
  color          String?
  description    String?
  amount         Int
  status         ItemStatus     @default(ACTIVE)
  imageUrl       String?        @map("image_url")
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  history        ContractItem[]

  @@map("items")
}

model Category {
  id             String        @id @default(cuid())
  name           String
  items          Item[]
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@unique([name, organizationId])
  @@map("categories")
}

model Customer {
  id                    String        @id @default(uuid())
  name                  String
  document              String
  secondDocument        String?       @map("second_document")
  email                 String?
  phone                 String?
  birthdate             DateTime?
  mediaContact          String?       @map("media_contact")
  additionalInformation String?
  zipcode               String?
  city                  String?
  state                 String?
  address               String?
  neighborhood          String?
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  Contract              Contract[]
  organization          Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId        String?

  @@unique([email])
  @@map("customers")
}

model Contract {
  id             String         @id @default(uuid())
  code           Int            @default(autoincrement())
  name           String
  eventDate      DateTime       @map("event_date")
  startDate      DateTime       @map("start_date")
  endDate        DateTime       @map("end_date")
  totalValue     Float          @map("total_value")
  customer       Customer       @relation(fields: [customerId], references: [id])
  status         ContractStatus
  rentedItems    ContractItem[]
  payment        PAYMENT[]
  createdAt      DateTime       @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  createdBy      User           @relation(fields: [userId], references: [id])
  documents      Document[]
  userId         String
  customerId     String
  Organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map("contracts")
}

model Document {
  id             String       @id @default(uuid())
  type           DocumentType
  content        String?
  additionalInfo String?
  fee            Float?
  contractId     String
  Contract       Contract     @relation(fields: [contractId], references: [id])
}

enum DocumentType {
  COLLECTION
  DEVOLUTION
  PAYMENT
}

model ContractItem {
  id              String  @id @default(uuid())
  itemId          String
  quantity        Int
  price           Float
  discount        Float?
  isFixedDiscount Boolean
  isCourtesy      Boolean

  Contract   Contract? @relation(fields: [contractId], references: [id])
  contractId String?
  Item       Item      @relation(fields: [itemId], references: [id])

  @@map("contract_items")
}

model PAYMENT {
  id                 String        @id @default(uuid())
  value              Float
  date               DateTime      @map("date")
  isPaid             Boolean
  method             PaymentMethod
  creditParcelAmount Int           @map("credit_parcel_amount")
  createdAt          DateTime      @default(now()) @map("created_at")
  Contract           Contract?     @relation(fields: [contractId], references: [id])
  contractId         String?

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  VOUCHER
  CASH
  OTHER
}

enum ContractStatus {
  OPEN
  CLOSED
  CANCELLED
  COLLECTED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  PENDING
  AVALIABLE
  IN_USE
  IN_REPAIR
}
