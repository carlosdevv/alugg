// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum TokenType {
  PASSWORD_RECOVER
  EMAIL_VALIDATION
}

model User {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  passwordHash       String         @map("password_hash")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  Inventory          Inventory?

  @@map("users")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @map("owner_id")
  invites   Invite[]
  members   Member[]

  @@map("organizations")
}

model Member {
  id             String       @id @default(uuid())
  role           Role         @default(MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Invite {
  id             String       @id @default(uuid())
  email          String
  role           Role
  createdAt      DateTime     @default(now()) @map("created_at")
  author         User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId       String?      @map("author_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  code      String?
  createdAt DateTime  @default(now()) @map("created_at")
  email     String?

  @@map("tokens")
}

model Inventory {
  id         String          @id @default(cuid())
  items      InventoryItem[]
  categories Category[]
  owner      User            @relation(fields: [ownerId], references: [id])
  ownerId    String          @unique @map("owner_id")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  @@map("inventories")
}

model InventoryItem {
  id               BigInt     @id
  name             String
  code             String?
  objectPrice      Float      @map("object_price")
  rentPrice        Float      @map("rent_price")
  size             String?
  color            String?
  description      String?
  amount           Int
  itemInRenovation Boolean    @default(false) @map("item_in_renovation")
  itemInactive     Boolean    @default(false) @map("item_inactive")
  imageUrl         String?    @map("image_url")
  category         Category   @relation(fields: [categoryId], references: [id])
  categoryId       String
  Inventory        Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId      String?
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  @@map("inventory_items")
}

model Category {
  id          String          @id @default(cuid())
  name        String
  items       InventoryItem[]
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  Inventory   Inventory?      @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  @@map("categories")
}
